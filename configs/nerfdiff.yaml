name: "nerfdiff"
tag: ${data.random_camera.height}_${rmspace:${basename:${data.image_path}},_}
exp_root_dir: "outputs"
seed: 0

data_type: "single-image-datamodule"
data: # threestudio/data/image.py -> SingleImageDataModuleConfig
  image_path: ./load/images/hamburger_rgba.png
  height: [256, 512]
  width: [256, 512]
  resolution_milestones: [200]
  default_elevation_deg: 0.0
  default_azimuth_deg: 0.0
  default_camera_distance: 3.8
  default_fovy_deg: 20.0
  requires_depth: ${cmaxgt0orcmaxgt0:${system.loss.lambda_depth},${system.loss.lambda_depth_rel}}
  requires_normal: ${cmaxgt0:${system.loss.lambda_normal}}
  random_camera: # threestudio/data/uncond.py -> RandomCameraDataModuleConfig
    height: 256
    width: 256
    batch_size: 12
    # resolution_milestones: [200, 300]
    eval_height: 512
    eval_width: 512
    eval_batch_size: 1
    elevation_range: [-10, 80]
    azimuth_range: [-180, 180]
    camera_distance_range: [3.8, 3.8]
    fovy_range: [20.0, 20.0] # Zero123 has fixed fovy
    progressive_until: 0
    camera_perturb: 0.0
    center_perturb: 0.0
    up_perturb: 0.0
    light_position_perturb: 1.0
    light_distance_range: [7.5, 10.0]
    eval_elevation_deg: ${data.default_elevation_deg}
    eval_camera_distance: ${data.default_camera_distance}
    eval_fovy_deg: ${data.default_fovy_deg}
    light_sample_strategy: "dreamfusion"
    batch_uniform_azimuth: False
    n_val_views: 30
    n_test_views: 120

system_type: "nerfdiff-system"
system:
  start_editing_step: 20000
  per_editing_step: 10

  geometry_type: "implicit-volume"
  geometry:
    radius: 2.
    normal_type: analytic

    pos_encoding_config:
      otype: HashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.4472692374403782 # max resolution 4096

    density_bias: "blob_magic3d"
    density_activation: softplus
    density_blob_scale: 10.
    density_blob_std: 0.5


  material_type: "diffuse-with-point-light-material"
  material:
    ambient_only_steps: 9999999
    albedo_activation: sigmoid

  # background_type: "neural-environment-map-background"
  # background:
  #   color_activation: sigmoid
  #   random_aug: false
  # material_type: "hybrid-rgb-latent-material"
  # material:
  #   n_output_dims: 11
  #   requires_normal: true

  background_type: "solid-color-background"
  background:
    n_output_dims: 3
    color: [0, 0, 0]

  renderer_type: "patch-renderer"
  renderer:
    base_renderer_type: "nerf-volume-renderer"
    base_renderer:
      radius: ${system.geometry.radius}
      num_samples_per_ray: 384
    patch_size: 64

  guidance_type: "nerfdiff-zero123-guidance"
  guidance:
    pretrained_model_name_or_path: "./load/zero123/zero123-xl.ckpt"
    pretrained_config: "./load/zero123/sd-objaverse-finetune-c_concat-256.yaml"
    vram_O: false
    cond_image_path: ${data.image_path}
    cond_elevation_deg: ${data.default_elevation_deg}
    cond_azimuth_deg: ${data.default_azimuth_deg}
    cond_camera_distance: ${data.default_camera_distance}
    guidance_scale: 3.0
    #min_step_percent: 0.02
    min_step_percent: [0, 0.4, 0.2, 200]  # (start_iter, start_val, end_val, end_iter)
    #max_step_percent: 0.98
    max_step_percent: [0, 0.85, 0.5, 200]

  loggers:
    wandb:
      enable: false
      project: 'threestudio'

  loss:
    lambda_sds: 0.
    lambda_rgb: 500.
    lambda_mask: 50.
    lambda_depth: 0. # 0.05
    lambda_depth_rel: 0. # [0, 0, 0.05, 100]
    lambda_normal: 0. # [0, 0, 0.05, 100]
    lambda_normal_smooth: 8.0
    lambda_3d_normal_smooth: 8.0
    lambda_orient: [0, 10.0, 1000., 5000.0]
    lambda_sparsity: 1.0
    lambda_opaque: 1.0
    lambda_l1: 10.
    lambda_p: 0.01
  optimizer:
    name: Adam
    args:
      lr: 0.01
      betas: [0.9, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.01
      background:
        lr: 0.001

trainer:
  max_steps: 4000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  val_check_interval: 600
  enable_progress_bar: true
  precision: 16-mixed

checkpoint:
  save_last: true
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}
